/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_DEFINES_PB_H_INCLUDED
#define PB_DEFINES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _STATUS {
    STATUS_OK = 0,
    STATUS_KO = 1
} STATUS;

typedef enum _VOLTAGE {
    VOLTAGE_DSO_VOLTAGE_GND = 0, /* 0 */
    VOLTAGE_DSO_VOLTAGE_5MV = 1, /* 1 */
    VOLTAGE_DSO_VOLTAGE_10MV = 2, /* 2 */
    VOLTAGE_DSO_VOLTAGE_20MV = 3, /* 3 */
    VOLTAGE_DSO_VOLTAGE_50MV = 4, /* 4 */
    VOLTAGE_DSO_VOLTAGE_100MV = 5, /* 5 */
    VOLTAGE_DSO_VOLTAGE_200MV = 6, /* 6 */
    VOLTAGE_DSO_VOLTAGE_500MV = 7, /* 7 */
    VOLTAGE_DSO_VOLTAGE_1V = 8, /* 8 */
    VOLTAGE_DSO_VOLTAGE_2V = 9, /* 9 */
    VOLTAGE_DSO_VOLTAGE_5V = 10 /* 10 */
} VOLTAGE;

typedef enum _TIMEBASE {
    TIMEBASE_DSO_TIME_BASE_10US = 0,
    TIMEBASE_DSO_TIME_BASE_20US = 1,
    TIMEBASE_DSO_TIME_BASE_50US = 2,
    TIMEBASE_DSO_TIME_BASE_100US = 3,
    TIMEBASE_DSO_TIME_BASE_200US = 4,
    TIMEBASE_DSO_TIME_BASE_500US = 5,
    TIMEBASE_DSO_TIME_BASE_1MS = 6,
    TIMEBASE_DSO_TIME_BASE_2MS = 7,
    TIMEBASE_DSO_TIME_BASE_5MS = 8,
    TIMEBASE_DSO_TIME_BASE_10MS = 9,
    TIMEBASE_DSO_TIME_BASE_20MS = 10,
    TIMEBASE_DSO_TIME_BASE_50MS = 11
} TIMEBASE;

typedef enum _TRIGGER {
    TRIGGER_DSO_TRIGGER_RISING = 0,
    TRIGGER_DSO_TRIGGER_FALLING = 1,
    TRIGGER_DSO_TRIGGER_BOTH = 2,
    TRIGGER_DSO_TRIGGER_RUN = 3
} TRIGGER;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _STATUS_MIN STATUS_OK
#define _STATUS_MAX STATUS_KO
#define _STATUS_ARRAYSIZE ((STATUS)(STATUS_KO+1))

#define _VOLTAGE_MIN VOLTAGE_DSO_VOLTAGE_GND
#define _VOLTAGE_MAX VOLTAGE_DSO_VOLTAGE_5V
#define _VOLTAGE_ARRAYSIZE ((VOLTAGE)(VOLTAGE_DSO_VOLTAGE_5V+1))

#define _TIMEBASE_MIN TIMEBASE_DSO_TIME_BASE_10US
#define _TIMEBASE_MAX TIMEBASE_DSO_TIME_BASE_50MS
#define _TIMEBASE_ARRAYSIZE ((TIMEBASE)(TIMEBASE_DSO_TIME_BASE_50MS+1))

#define _TRIGGER_MIN TRIGGER_DSO_TRIGGER_RISING
#define _TRIGGER_MAX TRIGGER_DSO_TRIGGER_RUN
#define _TRIGGER_ARRAYSIZE ((TRIGGER)(TRIGGER_DSO_TRIGGER_RUN+1))


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
